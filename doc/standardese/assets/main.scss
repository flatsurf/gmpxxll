---
# Styling for this documentation. Mostly we use this to hide and
# reorder certain sections that standardese generates but that do not seem
# relevant to use.
# The main Sass file needs front matter (the dashes are enough)
# Note that all the order: we are using is very brittle. We should patch
# standardese to allow us to do such reording.
---

@import "minima";

/* We are not a blog, so let's use some more space */
.wrapper {
  max-width: calc(960px - (2 * 15px));
  padding-left: 15px;
  padding-right: 15px;
}

/* Minimia adds a black line at the top; imho it looks weird so let's drop it. */
.site-header {
  border-top: 0;
}

/* Properly break long lines in source code */
pre code {
  white-space: pre-wrap;
  word-break: break-all;
}

/* Smaller boxes around inline code blocks */
p code {
  padding: 1px;
}

/* Shrink source code to make things more compact */
.highlighter-rouge {
  font-size: 12px;

  & code, pre {
    font-size: inherit;
  }
}

/* Allow for reordings and other flex foo */
.post-content {
  display: flex;
  flex-direction: column;
}

/* Shrink overwhelming file title */
header .post-title {
  font-size: 24px;
}

[id^="header-file-"] {
  display: none;

  /* Do not display header contents verbatim. */
  & + .language-cpp {
    display: none;
  } 

  /* If there's a file description, it shows before anything else. */
  & + .language-cpp ~ * {
    order: -3;
  }

  /* Then come all the other sections. */
  & ~ .language-cpp ~ h3 ~ * {
    order: initial;
  }

  /* Lift the first paragraph of class description above the class code block. */
  & ~ [id^="class-"], & ~ [id^="struct-"] {
    /* The class header comes first. */
    order: -2 !important;

    /* Then the first paragraph of class description. */
    & + * + p {
      order: -1 !important;
    }
  }

  /* Hide <hr> inside the same class */
  & ~ hr {
    display: none;

    & + hr {
      display: initial;
    }
  }

  /* Make grouping of synopsis and documentation more clearly visible. The
   * doubling of language-cpp omits this for the file description whose code
   * block we've hidden above. */
  & + .language-cpp ~ .language-cpp.highlighter-rouge {
    /* Show a small bar the same color as the code block in the first paragraph
     * after the code block. */
    & ~ p::before {
      position: relative;
      display: none;
      content: " ";
      margin-top: -1000ex;
      margin-right: -4px;
      left: -13px;
      border: 1px solid #e8e8e8;
      border-top: 0;
      border-bottom: 0;
      z-index: 1;
      background-color: #eef;
      top: calc(1em - 1.5px);
      height: 3em;
      width: 2px;
    }

    & + p::before {
      display: inline-block;
    }

    & ~ p, & ~ .language-c\+\+.highlighter-rouge {
      // Same padding that the code has inside its box.
      padding-left: 13px;
    }
  }

  /* Since we moved up the first paragraph of the class description, we have
   * to show this indicator on the second paragraph. */
  & ~ [id^="class-"], & ~ [id^="struct-"] {
    & + .language-cpp.highlighter-rouge + p {
      padding-left: 2px;

      &::before {
        display: none;
      }
    }
    & + .language-cpp.highlighter-rouge + * + p::before {
      display: inline-block;
    }
  }
}

/* Show code examples (c++) in a different color */
.language-c\+\+.highlighter-rouge {
  position: relative;
  margin-top: .5em;

  & .highlight, & code {
    background-color: #e5f4fb;
  }

  &::before {
    display: inline-block;
    position: absolute;
    top: -1.3em;
    font-size: 12px;
    font-weight: bold;
    background-color: #e5f4fb;
    border: 1px solid #e8e8e8;
    border-bottom: 0;
    content: "example";
    font-variant: small-caps;
    padding: 0px 8px;
    // margin-top: -1024px;
  }
}

/* Tweak borders around code blocks so our visual bars on the left of the first
 * paragraph cut the corner exactly. */
pre {
  border-bottom-left-radius: 0;
}

/* Use same spacing after <hr> and after <p> */
hr {
  margin-bottom: 15px;
}

/* Do not decorate links in huge headers as the underlining looks weird */
h1 a:hover {
  text-decoration: none;
}

/* Hide mostly redundant "Function", "Constructor" headers */
h3[id^="function-"], h3[id^="constructor-"] {
  display: none;
}

/* Shrink subordinate headers in a class or struct */
h3[id^="class-"], h3[id^="struct"] {
  & ~ h3 {
    /* shrink to h4 */
    font-size: 20px;

    /* but do not shrink other classes or structs */
    &[id^="class-"], &[id^="struct-"] {
      font-size: 26px;
    }
  }
}

/* Align code segments in headers a bit more naturally with the text */
h3 code {
  vertical-align: middle;
}

/* Edit on GitHub Button */
.github-edit {
  position: absolute;
  top: 1em;
  right: 1em;
}
