{"project": "gmpxxll", "project_url": "https://github.com/flatsurf/gmpxxll", "show_commit_url": "https://github.com/flatsurf/gmpxxll/commit/", "hash_length": 8, "revision_to_hash": {"14": "32e510c1338aac1543f9e57491b8075eee03fd37", "18": "8bb8279f66a9470ac61e9f9291fea0b2a0d8700c", "21": "9dd8452122d02f2c2156a8fadfa127fa9edf84b3", "23": "e42adb228d14083f085c5b8a45983a0f5e2ca6b2", "25": "087139f89c60198400ebdc47d67743470d1bcecb", "27": "baf26943a195ed89be5534555ce4d61d160d16d1", "29": "9829bd9faf1234a97f08e9315d6d2136c4246aa8", "33": "285541d62fe2af1586e578df6438f9362defe77f", "38": "148c74b3e3d8d92f33248c5629d099c3c71b04b0", "43": "05b1de7d36c2e0e40f1664c3ef7669c259113b66", "46": "474ac8c87b3d7c05d41520272447cf198419c0e5", "49": "058bc8fa5c1f39860c5d0399f45ef45b71c4df56", "52": "937951e365d72971fa92537abafeac0c24061434", "55": "db27b9aa42a18e4f2e5e282b58ac0d1b9eb11a4f", "65": "121c0448173d2bcfe20db4a13ed17cc1197ca420", "70": "04f6cb5d89f7b56cab165852fb2ce7d7603a7264", "72": "65196db5404f72d888312044d47f739eafe55621", "78": "8bc296e19e744fa4f52c28aedca9aa8a66fa66f1", "83": "2c42d53ce406a019451665c199bc3854523d9572", "84": "1a5fd8b6ba12ccb4b97aeaa58f72bc43bd543a2f", "89": "ce98fb6be99e38a5bc6724c50fbc8889ade4815b", "90": "bed6d9a084d1d267e55f172c40fafdf6ca9150a4", "92": "a3531dd4c134c80d41c3efc87eee30368c149c5b", "116": "356e5b681d47288aef6d6e787224079828264d39"}, "revision_to_date": {"14": 1579814137000, "18": 1579817135000, "21": 1579817982000, "23": 1579819184000, "25": 1579819834000, "27": 1579821250000, "29": 1579821815000, "33": 1579823912000, "38": 1579884226000, "43": 1579887441000, "46": 1580086981000, "49": 1580391459000, "52": 1580492870000, "55": 1580645566000, "65": 1608599200000, "70": 1609188715000, "72": 1609188779000, "78": 1610030161000, "83": 1636861808000, "84": 1636861943000, "89": 1636862244000, "90": 1636862307000, "92": 1636862315000, "116": 1642388413000}, "params": {"arch": ["x86_64"], "cpu": ["Standard_DS2_v2"], "machine": ["Azure"], "os": ["Linux"], "ram": ["61830880"], "python": ["3.10", "3.8", "3.9"], "automake": [""], "benchmark==1.5.0": [""], "ccache": [""], "cppasv": [""], "cxx-compiler": [""], "gmp": [""], "libtool": [""], "make": [""], "Cython": ["", null], "arb": ["", null], "boost-cpp": ["", null], "e-antic": ["", null], "gtest": ["", null], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "python": "3.9", "automake": "", "benchmark==1.5.0": "", "ccache": "", "cppasv": "", "cxx-compiler": "", "gmp": "", "libtool": "", "make": "", "branch": "master", "Cython": null, "arb": null, "boost-cpp": null, "e-antic": null, "gtest": null}, {"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "python": "3.10", "automake": "", "benchmark==1.5.0": "", "ccache": "", "cppasv": "", "cxx-compiler": "", "gmp": "", "libtool": "", "make": "", "branch": "master", "Cython": null, "arb": null, "boost-cpp": null, "e-antic": null, "gtest": null}], "benchmarks": {"FromInt.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FromInt.track_time", "param_names": [], "params": [], "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "FromLongLong.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FromLongLong.track_time", "param_names": ["param1"], "params": [["'0'", "'10'", "'30'", "'40'", "'60'"]], "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "ToInt.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "ToInt.track_time", "param_names": [], "params": [], "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "ToLongLong.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "ToLongLong.track_time", "param_names": ["param1"], "params": [["'0'", "'10'", "'30'", "'40'", "'60'"]], "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}}, "machines": {"Azure": {"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "version": 1}}, "tags": {"0.0.0": 14, "1.0.0": 72, "1.0.1": 92}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}